{"version":3,"sources":["components/credentials.js","components/weatherType.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["apiCredentials","WeatherType","Weather","props","apiFetch","apiUrl","state","city","fetch","then","result","json","results","setData","weatherResults","current","style","visibility","console","log","catch","error","setState","statusText","data","time","location","localtime","name","region","country","weather","condition","text","celsius","temp_c","farenhiet","temp_f","humidity","cloud","wind","wind_kph","document","body","backgroundImage","textChange","event","target","value","search","preventDefault","apiData","textBox","React","createRef","className","onSubmit","this","ref","type","placeholder","onChange","fontSize","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f97663bb.chunk.js","sourcesContent":["export const apiCredentials = {\n\tkey: '7b6fba372203497b81e143054200406'\n}","export const WeatherType = {\n\t\"Partly cloudy\": 'url(/photos/PartlyCloudy.jpg)',\n\t\"Clear\": 'url(/photos/Clear.jpg)',\n\t\"Sunny\": 'url(/photos/Sunny.jpg)',\n\t\"Mist\": 'url(/photos/Mist.jpg)',\n\t\"Cloudy\": 'url(/photos/Cloudy.jpg)',\n\t\"Overcast\": 'url(/photos/Overcast.jpg)',\n\t\"Patchy rain possible\": 'url(/photos/PatchyRain.jpg)',\n\t\"Patchy snow possible\": 'url(/photos/LightSnow.jpg)',\n\t\"Patchy sleet possible\": 'url(/photos/Snow.jpg)',\n\t\"Patchy freezing drizzle possible\": 'url(/photos/PatchyRain.jpg)',\n\t\"Thundery outbreaks possible\": 'url(/photos/Thunder.jpg)',\n\t\"Blowing snow\": 'url(/photos/Snow.jpg)',\n\t\"Blizzard\": 'url(/photos/Snow.jpg)',\n\t\"Fog\": 'url(/photos/Fog.jpg)',\n\t\"Freezing fog\": 'url(/photos/Fog.jpg)',\n\t\"Patchy light drizzle\": 'url(/photos/PatchyRain.jpg)',\n\t\"Light drizzle\": 'url(/photos/PatchyRain.jpg)',\n\t\"Freezing drizzle\": 'url(/photos/LightSnow.jpg)',\n\t\"Heavy freezing drizzle\": 'url(/photos/Rain.jpg)',\n\t\"Patchy light rain\": 'url(/photos/LightRain.jpg)',\n\t\"Light rain\": 'url(/photos/LightRain.jpg)',\n\t\"Moderate rain at times\": 'url(/photos/PatchyRain.jpg)',\n\t\"Moderate rain\": 'url(/photos/LightRain.jpg)',\n\t\"Heavy rain at times\": 'url(/photos/HeavyRain.jpg)',\n\t\"Heavy rain\": 'url(/photos/HeavyRain.jpg)',\n\t\"Light freezing rain\": 'url(/photos/LightRain.jpg)',\n\t\"Moderate or heavy freezing rain\": 'url(/photos/Rain.jpg)',\n\t\"Light sleet\": 'url(/photos/LightSnow.jpg)',\n\t\"Moderate or heavy sleet\": 'url(/photos/Snow.jpg)',\n\t\"Patchy light snow\": 'url(/photos/LightSnow.jpg)',\n\t\"Light snow\": 'url(/photos/LightSnow.jpg)',\n\t\"Patchy moderate snow\": 'url(/photos/LightSnow.jpg)',\n\t\"Moderate snow\": 'url(/photos/Snow.jpg)',\n\t\"Patchy heavy snow\": 'url(/photos/Snow.jpg)',\n\t\"Heavy snow\": 'url(/photos/Snow.jpg)',\n\t\"Ice pellets\": 'url(/photos/Icey.jpg)',\n\t\"Light rain shower\": 'url(/photos/LightRain.jpg)',\n\t\"Moderate or heavy rain shower\": 'url(/photos/HeavyRain.jpg)',\n\t\"Torrential rain shower\": 'url(/photos/HeavyRain.jpg)',\n\t\"Light sleet showers\": 'url(/photos/LightRain.jpg)',\n\t\"Moderate or heavy sleet showers\": 'url(/photos/LightRain.jpg)',\n\t\"Light snow showers\": 'url(/photos/LightSnow.jpg)',\n\t\"Moderate or heavy snow showers\": 'url(/photos/Snow.jpg)',\n\t\"Light showers of ice pellets\": 'url(/photos/Icey.jpg)',\n\t\"Moderate or heavy showers of ice pellets\": 'url(/photos/HeavyRain.jpg)',\n\t\"Patchy light rain with thunder\": 'url(/photos/ThunderCloud.jpg)',\n\t\"Moderate or heavy rain with thunder\": 'url(/photos/ThunderRain.jpg)',\n\t\"Patchy light snow with thunder\": 'url(/photos/ThunderCloud.jpg)',\n\t\"Moderate or heavy snow with thunder\": 'url(/photos/ThunderCloud.jpg)',\n}","import React, { Component } from \"react\";\n\nimport { apiCredentials } from './credentials';\nimport { WeatherType } from './weatherType'\n\nexport default class Weather extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\t\t\tstatusText: '',\n\n\t\t\ttime: '', name: '', region: '', country: '',\n\t\t\tweather: '', celsius: '', farenhiet: '',\n\t\t\thumidity: '', cloud: '', wind: ''\n\t\t}\n\n\t\tthis.weather = WeatherType;\n\t\tthis.apiData = null;\n\n\t\tthis.textBox = React.createRef();\n\t\tthis.weatherResults = React.createRef();\n\t}\n\t//componentDidMount=()=>{}\n\tapiFetch = () => {\n\t\tconst apiUrl = `https://api.weatherapi.com/v1/current.json?key=${apiCredentials.key}&q=${this.state.city}`;\n\n\t\tfetch(apiUrl).then(result => result.json()).then((results) => {\n\t\t\tthis.setData(results);\n\t\t\tthis.weatherResults.current.style.visibility = 'visible';\n\t\t\tconsole.log(results);\n\t\t}).catch(error => {\n\t\t\tthis.setState({ statusText: 'Place not found.' })\n\t\t\tthis.weatherResults.current.style.visibility = 'hidden'\n\t\t\tconsole.log(error);\n\t\t})\n\t}\n\n\tsetData = (data) => {\n\t\tthis.setState({time: data.location.localtime});\n\t\tthis.setState({ name: data.location.name });\n\t\tthis.setState({ region: data.location.region });\n\t\tthis.setState({ country: data.location.country });\n\t\tthis.setState({ weather: data.current.condition.text });\n\t\tthis.setState({ celsius: data.current.temp_c });\n\t\tthis.setState({ farenhiet: data.current.temp_f });\n\t\tthis.setState({ humidity: data.current.humidity });\n\t\tthis.setState({ cloud: data.current.cloud });\n\t\tthis.setState({ wind: data.current.wind_kph });\n\n\t\tthis.setState({ statusText: 'Showing latest reports.' });\n\n\t\tdocument.body.style.backgroundImage = this.weather[data.current.condition.text];\n\t}\n\n\ttextChange = (event) => {\n\t\tthis.setState({ city: event.target.value });\n\t}\n\n\tsearch = (event) => {\n\t\tevent.preventDefault();\n\t\tthis.apiFetch();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>The Weather</h1>\n\n\t\t\t\t<form className='searchBar' onSubmit={this.search} >\n\t\t\t\t\t<input ref={this.textBox} type='text' placeholder='Enter your City' onChange={this.textChange} />\n\t\t\t\t\t<button type='submit'>Search</button>\n\t\t\t\t</form>\n\n\t\t\t\t<div ref={this.weatherResults} className='weatherDisplay'>\n\t\t\t\t\t<p>{this.state.name}</p>\n\t\t\t\t\t<p>{this.state.region} - {this.state.country}</p>\n\t\t\t\t\t<p style={{ fontSize: '60px' }}>{this.state.weather}</p>\n\t\t\t\t\t<p>Temp: {this.state.celsius} °C / {this.state.farenhiet} °F</p>\n\t\t\t\t\t<p>Cloud: {this.state.cloud}%</p>\n\t\t\t\t\t<p>Wind: {this.state.wind} Km/hr</p>\n\t\t\t\t\t<p>Humidity: {this.state.humidity}%</p>\n\t\t\t\t</div>\n\n\t\t\t\t<p style={{ fontSize: '20px' }}>{this.state.statusText}</p>\n\t\t\t</div>\n\t\t)\n\t}\n}","import React from \"react\";\nimport Weather from \"./components/weather\"\nimport \"./App.css\";\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<Weather/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}